@using Lab13.Models
@model SalesListViewModel

@{
    ViewBag.Title = "Quarterly Sales";

    // aliases to make paging, sorting, and filtering code shorter
    RouteDictionary current = Model.CurrentRoute;
    RouteDictionary routes = Model.CurrentRoute.Clone();
}


<h4 class="mt-t rb-2">@ViewBag.Title</h4>

@* filter form *@
<form asp-action="Filter" method="post" class="form-inline">
    <label>Employee: </label>
    <select name="filter" class="form-control m-2"
            asp-items="@(new SelectList(
            Model.Employees, "EmployeeId", "FullName", current.EmployeeFilter))">
        <option value="@QuarterlySalesGridDTO.DefaultFilter">All</option>
    </select>

    <label>Year: </label>
    <select name="filter" class="form-control m-2"
            asp-items="@(new SelectList(
            Model.Years, "Key", "Value", current.YearFilter))">
        <option value="@QuarterlySalesGridDTO.DefaultFilter">All</option>
    </select>

    <label>Quarter: </label>
    <select name="filter" class="form-control m-2"
            asp-items="@(new SelectList(
            Model.Quarters, "Key", "Value", current.QuarterFilter))">
        <option value="@QuarterlySalesGridDTO.DefaultFilter">All</option>
    </select>

    <button type="submit" class="btn btn-primary mr-2">Filter</button>
    <button type="submit" class="btn btn-primary"
            name="clear" value="true">
        Clear
    </button>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                @{ routes.SetSortAndDirection(nameof(Sales.Year), current);}
                <a asp-action="Index" asp-all-route-data="@routes">Year</a>
            </th>
            <th>
                @{ routes.SetSortAndDirection(nameof(Sales.Quarter), current);}
                <a asp-action="Index" asp-all-route-data="@routes">Quarter</a>
            </th>
            <th>
                @{ routes.SetSortAndDirection(nameof(Employee), current);}
                <a asp-action="Index" asp-all-route-data="@routes">Employee</a>
            </th>
            <th>Amount</th>
        </tr>
    </thead>
    <tbody>
        @foreach (Sales sales in Model.Sales)
        {
            <tr>
                <td>@sales.Year</td>
                <td>@sales.Quarter</td>
                <td>@sales.Employee.FullName</td>
                <td>@sales.Amount?.ToString("c")</td>
            </tr>

        }
    </tbody>
    <tfoot>
        <tr>
            <td colspan="3">Total Sales</td>
            <td>@Model.Sales.Sum(s => s.Amount)?.ToString("c")</td>
        </tr>

    </tfoot>
</table>

@* paging links *@
@{
    @* Reset the route dictionary to the current route values. This is necessary
        to clear the changes made while creating the sorting links above. Clone so
        don't overwrite current route segment values. *@
    routes = Model.CurrentRoute.Clone();

    @* update route dictionary with page number in 'i' and then use
        updated route dictionary to create route segments for paging link.*@
    for (int i = 1; i <= Model.TotalPages; i++)
    {
        routes.PageNumber = i;
        <a asp-action="Index" asp-all-route-data="@routes"
           class="btn btn-outline-primary @Nav.Active(i, current.PageNumber)">@i</a>
    }
}


